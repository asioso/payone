services:
  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services
    public: false

  #
  # CONTROLLERS
  #

  # auto-register all controllers as services
  PayoneBundle\Controller\:
    resource: '../../Controller'
    public: true
    tags: ['controller.service_arguments']


  PayoneBundle\Ecommerce\PaymentManager\BsPayone:
    arguments:
      $options: []
      $templatingEngine: '@templating.engine.delegating'
      $session: '@session'
      $formFactory: '@form.factory'
      $serverService: '@PayoneBundle\Service\ServerToServerServiceInterface'


  # The migration installer needs the bundle it is operating on upon construction to be able to build its migration configuration.
  # As bundles can't be directly used as service argument, we need to make use of the expression language to fetch the bundle
  # from the kernel upon construction.
  PayoneBundle\Installer:
    public: true
    arguments:
      # fetch the bundle via expression language
      $bundle: "@=service('kernel').getBundle('PayoneBundle')"


  PayoneBundle\Registry\IRegistry: '@PayoneBundle\Registry\Registry'

  PayoneBundle\Registry\Registry:
    arguments:
      $generator: '@Pimcore\Bundle\NumberSequenceGeneratorBundle\RandomGenerator'


  PayoneBundle\Model\IPaymentURLGenerator: '@PayoneBundle\Model\DefaultPaymentURLGenerator'

  PayoneBundle\Model\DefaultPaymentURLGenerator:
    arguments:
      $router: '@router'


  PayoneBundle\Service\ServerToServerServiceInterface: '@PayoneBundle\Service\ServerToServerHandler'

  PayoneBundle\Service\ServerToServerHandler:
    arguments:
      $logger: '@monolog.logger.payment'
      $eventDispatcher: '@event_dispatcher'


  #Events
  PayoneBundle\EventListener\TransactionEventListener:
    tags:
      - { name: kernel.event_subscriber }
    arguments:
      $registry: '@PayoneBundle\Registry\IRegistry'

  PayoneBundle\EventListener\PaymentUpdateSubscriber:
    tags:
      - { name: kernel.event_subscriber }

  #Events
  PayoneBundle\EventListener\CaptureListener:
    tags:
      - { name: kernel.event_subscriber }
    arguments:
      $captureQueue: '@PayoneBundle\Registry\CaptureQueueInterface'

  PayoneBundle\Registry\CaptureQueueInterface: '@PayoneBundle\Registry\CaptureHandler'

  PayoneBundle\Registry\CaptureHandler:
    arguments:
      $serverService: '@PayoneBundle\Service\ServerToServerServiceInterface'

