services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    #
    # CONTROLLERS
    #

    # auto-register all controllers as services
    PayoneBundle\Controller\:
        resource: '../../Controller'
        public: true
        tags: ['controller.service_arguments']


    PayoneBundle\Ecommerce\PaymentManager\BsPayone:
        arguments:
            $options: []
            $templatingEngine: '@templating.engine.delegating'
            $session: '@session'
            $formFactory: '@form.factory'
            $logger: '@monolog.logger.payment'


    # The migration installer needs the bundle it is operating on upon construction to be able to build its migration configuration.
    # As bundles can't be directly used as service argument, we need to make use of the expression language to fetch the bundle
    # from the kernel upon construction.
    PayoneBundle\Installer:
        public: true
        arguments:
            # fetch the bundle via expression language
            $bundle: "@=service('kernel').getBundle('PayoneBundle')"


    PayoneBundle\Registry\IRegistry: '@PayoneBundle\Registry\Registry'

    PayoneBundle\Registry\Registry:
        arguments:
            $generator: '@Pimcore\Bundle\NumberSequenceGeneratorBundle\RandomGenerator'


    PayoneBundle\Model\IPaymentURLGenerator: '@PayoneBundle\Model\DefaultPaymentURLGenerator'

    PayoneBundle\Model\DefaultPaymentURLGenerator:
        arguments:
            $router: '@router'